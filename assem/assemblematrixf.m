function [K,F,M] = assemblematrixf(p, t, a,f)
% assemblematrixf assemble the stiffness matrix and the right hand sides
% for the discrete system. 
% ASSEMBLEMATRIX assemble mass matrix and stiffness matrix for piecewise
%                linear finite element
% [M, K] = assemblematrix(p, t, a)
% M is the mass matrix, 
% K is the stiffness matrix, 
% p and t are generated by DelaunayTri, 
% p is a np x 2 matrix, t is a nt x 3 matrix,
% a is the coefficients for the operator - div a grad u, taking values at 
% the centers of mass of triangles, a is a nt x 1 column vector.
% 

if nargin == 0
    %test_assemblematrixf();
    return
end
narginchk(3,4);
if size(p,2)~=2
    if size(p,1)==2
        p=p';
    else
        error('RPS:assem:assemblematrix:1st argument should be np*2')
    end
end
if size(t,2)~=3
    if size(t,1)==3
        t=t';
    else
         error('RPS:assem:assemblematrix:2nd argument should be nt*3')
    end
end
np = size(p, 1);
i1 = t(:, 1); i2 = t(:, 2); i3 = t(:, 3);

[ar, g1x, g1y, g2x, g2y, g3x, g3y] = artrg(p, t);

c3=((a.*(g1x.*g2x+g1y.*g2y)).*ar);
c1=((a.*(g2x.*g3x+g2y.*g3y)).*ar);
c2=((a.*(g3x.*g1x+g3y.*g1y)).*ar);

% stiffness matrix for piecewise linear basis
K=sparse(i1,i2,c3,np,np);
K=K+sparse(i2,i3,c1,np,np);
K=K+sparse(i3,i1,c2,np,np);
K=K+K.';
K=K+sparse(i1,i1,-c2-c3,np,np);
K=K+sparse(i2,i2,-c3-c1,np,np);
K=K+sparse(i3,i3,-c1-c2,np,np);
%%
if nargout>=2
    f=f.*ar/3;
%     F=zeros(np,1);
%     F(i1)=F(i1)+f(i1);
%     F(i2)=F(i2)+f(i2);
%     F(i3)=F(i3)+f(i3);
    F=sparse(i1,1,f,np,1);
    F=F+sparse(i2,1,f,np,1);
    F=F+sparse(i3,1,f,np,1);
end
if nargout>=3
    M = sparse([i1;i2;i3],[i2;i3;i1],1/12*[ar;ar;ar],np,np);
    M = M+M';
    M = M+sparse([i1;i2;i3],[i1;i2;i3],1/6*[ar;ar;ar],np,np);
end
end

% function test_assemblematrix()
% x = rand(20,1);
% y = rand(20,1);
% dt = DelaunayTri(x,y);
% triplot(dt);
% 
% p = [x, y];
% t = dt.Triangulation; 
% 
% [M, K] = assemblematrix(p, t, 1);
% 
% end